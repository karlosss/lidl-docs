#################
A complex example
#################

Do you still remember the code from the overview chapter? Now it is the correct time to explain it, and add even more stuff to it.

Say we want to generate the directory :code:`etc` with a file :code:`passwd` of the common format. Besides that, we would like to have a file containing a list of default passwords for each user, one password per line.

*LI-DL* is run without root access, therefore it is not possible to change the owner of any file - the owner of everything generated by *LI-DL* is the user who runs the Bash script. It is only possible to modify the permissions. This might be a bit silly for working with the :code:`etc`-like directory, but for testing purposes it should be good enough. (Or, as the CTU FIT students would say, *Guth enough*.)

Let's go ahead and create the directory::

    Directory {
        name = "etc"
        permissions = 555
    }

What has just been done? A directory of name :code:`etc` and permissions :code:`555` has been created. The data type of the permissions property can be quite arbitrary - it could be any which yields three octal digits.

Now, let's add the :code:`passwd` file into it::

    Directory {
        name = "etc"
        permissions = 555
        File {
            name = "passwd"
            permissions = [3, {"4"}]
            content = '...'
        }
    }

Why on earth do I write that weird permissions and not just plain :code:`444`? Well, it is to demonstrate that the property accepts everything what yields three octal digits. The generator says "give me exactly three characters from the alphabet containing exactly one character, the :code:`4`". It should not be hard to guess what the only possible outcome is.

We are almost done. Let's focus on the content now. Such created :code:`passwd` file would contain three dots as mentioned in the code, which is not what we want. For better imagination, let's add two lines of a real :code:`/etc/passwd` file::

    root:x:0:0:root:/root:/bin/bash
    bin:x:1:1:bin:/bin:/usr/bin/nologin

Let's now break down and describe a line using *LI-DL* strings, integers and generators.

- The username consists of lowercase characters, let's say from 3 to 15 characters long.
- :code:`:x:` is a literal.
- UID and GID are often the same. Let's keep them the same all the time here. They are separated by a literal :code:`:`.
- The next field is a comment, let's do it arbitrary, consisting of from 8 to 12 lowercase characters.
- For simplicity, let the homedir always be :code:`/`.
- The default shell seems to be sometimes :code:`/bin/bash` and sometimes :code:`/usr/bin/nologin`. Let 70 % of those be bash and the rest the nologin.

Now it is time to write *LI-DL* expressions for these bullets. Remember the plus operator for concatenation.

- Username: :code:`[3:15, LOWER_ASCII]`
- Hidden password hash: :code:`":x:"`
- UID and GID is quite tricky. We will use a generator to generate multiple lines and since the generator code is evaluated repeatedly for each iteration, we can define and use a variable. Therefore: :code:`(uid=0:65535) + ":" + uid`
- Comment: :code:`[8:12, LOWER_ASCII]`
- Homedir: :code:`"/"`
- Default shell: this one is quite tricky. There is one more data type, the *choice*. It is syntactically similar to a generator. It contains several items together with probabilities and upon request, an item is yielded, taking into account those probabilities. In our case: :code:`[0.3, "/usr/bin/nologin" | 0.7, "/bin/bash"]`

Now let's put it all together. The expression is quite long, so let's split it to multiple lines at the brackets and operators::

    Directory {
        name = "etc"
        permissions = 555
        File {
            name = "passwd"
            permissions = [3, {"4"}]
            content = [3:15, LOWER_ASCII] + ":x:" + (uid=0:65535) + 
                      ":" + uid + ":" +
                      [8:12, LOWER_ASCII] + ":/:" + 
                      [0.3, "/usr/bin/nologin" | 0.7, "/bin/bash"]
        }
    }

This generates an :code:`/etc/passwd` of exactly one line. To get multiple lines, we need to wrap our line with a generator of a count of lines we actually want. Let's say from 5 to 20. Do not forget the newline after each line::

    Directory {
        name = "etc"
        permissions = 555
        File {
            name = "passwd"
            permissions = [3, {"4"}]
            content = [5:20,
                          [3:15, LOWER_ASCII] + ":x:" + (uid=0:65535) + 
                          ":" + uid + ":" +
                          [8:12, LOWER_ASCII] + ":/:" + 
                          [0.3, "/usr/bin/nologin" | 0.7, "/bin/bash"] + "\n"
                       ]
        }
    }

And the first half is done. For the second half, we want the passwords. Let's say it will be a mix of lowercase characters and digits, but excluding :code:`0`, :code:`1`, :code:`l` and :code:`o`, as those might be mixed up with each other.

We already know how to create a file content. But what about the aplhabet here? It would be annoying to write all those 32 characters. Luckily, alphabets in *LI-DL* have similar behavior to sets from programming languages so we might subtract two alphabets using the minus operator.

If the password should be 8 characters long, this would be an expression to generate one::

    [8, (LOWER_ASCII + DIGITS) - {"0", "1", "l", "o"}]

Since all operators in *LI-DL* are left-associative and :code:`+` and :code:`-` have the same priority, the parentheses here are redundant.

You should be able to write the code to create the passwords file on your own. Until you realize a problem. The number of lines of this file must be the same as the count of lines of the :code:`passwd` file.

Do you remember what happens when you assign a range to a variable? Did you find it silly? If it were not of that, this problem would be impossible to solve. All what needs to be done here is to generate a number from a range, store it to a variable, and use the variable in the two content generators. The final code is below. Do not forget to add the :code:`Student` object::

    cnt = 5:20
    Directory {
        name = "etc"
        permissions = 555
        File {
            name = "passwd"
            permissions = [3, {"4"}]
            content = [cnt,
                          [3:15, LOWER_ASCII] + ":x:" + (uid=0:65535) + 
                          ":" + uid + ":" +
                          [8:12, LOWER_ASCII] + ":/:" + 
                          [0.3, "/usr/bin/nologin" | 0.7, "/bin/bash"] + 
                          "\n"
                       ]
        }
        File {
            name = "passwords"
            permissions = [3, {"4"}]
            content = [cnt,
                          [8, (LOWER_ASCII + DIGITS) - 
                              {"0", "1", "l", "o"}
                          ] + "\n"
                       ]
        }
    }
    Student {}

Congratulations, this is the end of the quickstart. Now you should be able to go through the real documentation and understand all *LI-DL* constructions.

